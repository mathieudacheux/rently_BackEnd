generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Address {
  address_id       Int        @id @default(autoincrement())
  address          String     @db.VarChar(250)
  city             String     @db.VarChar(75)
  zipcode          String     @db.Char(5)
  additionnal_info String?    @db.VarChar(100)
  longitude        String     @db.VarChar(25)
  latitude         String     @db.VarChar(25)
  created_at       DateTime   @default(now()) @db.DateTime(0)
  updated_at       DateTime?  @db.DateTime(0)
  deleted_at       DateTime?  @db.DateTime(0)
  agency           Agency[]
  property         Property[]
  user             User[]

  @@map("addresses")
}

model Agency {
  agency_id  Int        @id @default(autoincrement())
  name       String     @db.VarChar(250)
  created_at DateTime   @default(now()) @db.DateTime(0)
  updated_at DateTime?  @db.DateTime(0)
  deleted_at DateTime?  @db.DateTime(0)
  fee_id     Int
  address_id Int
  fee        Fee        @relation(fields: [fee_id], references: [fee_id], onUpdate: Restrict, map: "agency_ibfk_1")
  address    Address    @relation(fields: [address_id], references: [address_id], onUpdate: Restrict, map: "agency_ibfk_2")
  property   Property[]
  sector     Sector[]
  user       User[]

  @@index([address_id], map: "agency_ibfk_2")
  @@index([fee_id], map: "fee_id")
  @@map("agencies")
}

model Appointment {
  appointment_id                      Int              @id @default(autoincrement())
  tag_id                              Int
  date_start                          DateTime         @db.DateTime(0)
  date_end                            DateTime         @db.DateTime(0)
  note                                String?          @db.Text
  reminder                            DateTime         @db.DateTime(0)
  created_at                          DateTime         @default(now()) @db.DateTime(0)
  updated_at                          DateTime?        @db.DateTime(0)
  deleted_at                          DateTime?        @db.DateTime(0)
  property_id                         Int
  user_id_1                           Int
  user_id_2                           Int
  property                            Property         @relation(fields: [property_id], references: [property_id], onUpdate: Restrict, map: "appointment_ibfk_1")
  users_appointments_user_id_1Tousers User             @relation("appointments_user_id_1Tousers", fields: [user_id_1], references: [user_id], onUpdate: Restrict, map: "appointment_ibfk_2")
  users_appointments_user_id_2Tousers User             @relation("appointments_user_id_2Tousers", fields: [user_id_2], references: [user_id], onUpdate: Restrict, map: "appointment_ibfk_3")
  appointment_tags                    Appointment_tag @relation(fields: [tag_id], references: [appointment_tag_id], onUpdate: Restrict, map: "appointment_ibfk_4")

  @@index([property_id], map: "property_id")
  @@index([user_id_1], map: "user_id")
  @@index([user_id_2], map: "appointment_ibfk_3")
  @@index([tag_id], map: "appointment_ibfk_4")
  @@map("appointments")
}

model Article {
  article_id Int       @id @default(autoincrement())
  name       String    @db.VarChar(250)
  content    String    @db.Text
  created_at DateTime  @default(now()) @db.DateTime(0)
  updated_at DateTime? @db.DateTime(0)
  deleted_at DateTime? @db.DateTime(0)
  tag_id     Int
  user_id    Int
  tag        Tag       @relation(fields: [tag_id], references: [tag_id], onUpdate: Restrict, map: "article_ibfk_1")
  user       User      @relation(fields: [user_id], references: [user_id], onUpdate: Restrict, map: "article_ibfk_2")

  @@index([tag_id], map: "tag_id")
  @@index([user_id], map: "user_id")
  @@map("articles")
}

model Bookmark {
  bookmark_id Int       @id @default(autoincrement())
  created_at  DateTime  @default(now()) @db.DateTime(0)
  updated_at  DateTime? @db.DateTime(0)
  deleted_at  DateTime? @db.DateTime(0)
  user_id     Int
  property_id Int
  user        User      @relation(fields: [user_id], references: [user_id], onUpdate: Restrict, map: "bookmark_ibfk_1")
  property    Property  @relation(fields: [property_id], references: [property_id], onUpdate: Restrict, map: "bookmark_ibfk_2")

  @@index([property_id], map: "bookmark_ibfk_2")
  @@index([user_id], map: "user_id")
  @@map("bookmarks")
}

model Country {
  country_id Int       @id @default(autoincrement())
  name       String    @db.VarChar(75)
  created_at DateTime  @default(now()) @db.DateTime(0)
  updated_at DateTime? @db.DateTime(0)
  deleted_at DateTime? @db.DateTime(0)
  user       User[]

  @@map("countries")
}

model Fee {
  fee_id      Int       @id @default(autoincrement())
  rent_fee    String    @db.VarChar(5)
  sell_fee    String    @db.VarChar(5)
  square_fee  String    @db.VarChar(5)
  gestion_fee String    @db.VarChar(5)
  created_at  DateTime  @default(now()) @db.DateTime(0)
  updated_at  DateTime? @db.DateTime(0)
  deleted_at  DateTime? @db.DateTime(0)
  agency      Agency[]

  @@map("fees")
}

model Message {
  message_id                   Int       @id @default(autoincrement())
  content                      String    @db.Text
  created_at                   DateTime  @default(now()) @db.DateTime(0)
  updated_at                   DateTime? @db.DateTime(0)
  deleted_at                   DateTime? @db.DateTime(0)
  user_id_1                    Int
  user_id_2                    Int
  user_message_user_id_1Touser User      @relation("message_user_id_1Touser", fields: [user_id_1], references: [user_id], onUpdate: Restrict, map: "message_ibfk_1")
  user_message_user_id_2Touser User      @relation("message_user_id_2Touser", fields: [user_id_2], references: [user_id], onUpdate: Restrict, map: "message_ibfk_2")

  @@index([user_id_1], map: "user_id_1")
  @@index([user_id_2], map: "user_id_2")
  @@map("messages")
}

model Permission {
  permission_id Int       @id @default(autoincrement())
  properties    String
  addresses     String
  agencies      String
  appointments  String
  articles      String
  attachments   String
  bookmarks     String
  countries     String
  fees          String
  messages      String
  roles         String
  sectors       String
  statuses      String
  tags          String
  users         String
  created_at    DateTime  @default(now()) @db.DateTime(0)
  updated_at    DateTime? @db.DateTime(0)
  deleted_at    DateTime? @db.DateTime(0)
  role          Role[]

  @@map("permissions")
}

model Property {
  property_id                   Int            @id @default(autoincrement())
  name                          String         @db.VarChar(150)
  description                   String         @db.Text
  signature_date                DateTime?      @db.DateTime(0)
  property_type                 Int
  price                         Int
  surface                       String         @db.VarChar(50)
  land_size                     String         @db.VarChar(50)
  bathroom                      Int            @db.TinyInt
  kitchen                       Int            @db.TinyInt
  toilet                        Int            @db.TinyInt
  bedroom                       Int            @db.TinyInt
  elevator                      Boolean        @default(false)
  balcony                       Boolean        @default(false)
  terrace                       Boolean        @default(false)
  cellar                        Boolean        @default(false)
  parking                       Boolean        @default(false)
  number_room                   Int            @db.TinyInt
  pool                          Boolean        @default(false)
  caretaker                     Boolean        @default(false)
  fiber_deployed                Boolean        @default(false)
  duplex                        Boolean        @default(false)
  top_floor                     Boolean        @default(false)
  garage                        Boolean        @default(false)
  work_done                     Boolean        @default(false)
  life_annuity                  Boolean        @default(false)
  ground_floor                  Boolean
  land_size_1                   String         @db.VarChar(50)
  garden                        Boolean
  created_at                    DateTime       @default(now()) @db.DateTime(0)
  updated_at                    DateTime?      @db.DateTime(0)
  deleted_at                    DateTime?      @db.DateTime(0)
  owner_id                      Int
  status_id                     Int
  tenant_id                     Int?
  address_id                    Int
  dpe                           Int            @db.TinyInt
  agency_id                     Int
  appointment                   Appointment[]
  bookmark                      Bookmark[]
  user_property_owner_idTouser  User           @relation("property_owner_idTouser", fields: [owner_id], references: [user_id], onUpdate: Restrict, map: "property_ibfk_1")
  status                        Status         @relation(fields: [status_id], references: [status_id], onUpdate: Restrict, map: "property_ibfk_2")
  user_property_tenant_idTouser User?          @relation("property_tenant_idTouser", fields: [tenant_id], references: [user_id], onDelete: Restrict, onUpdate: Restrict, map: "property_ibfk_3")
  address                       Address        @relation(fields: [address_id], references: [address_id], onUpdate: Restrict, map: "property_ibfk_4")
  agency                        Agency         @relation(fields: [agency_id], references: [agency_id], onUpdate: Restrict, map: "property_ibfk_5")
  property_types                Property_type @relation(fields: [property_type], references: [property_type_id], onUpdate: Restrict, map: "property_ibfk_6")

  @@index([address_id], map: "address_id")
  @@index([owner_id], map: "owner_id")
  @@index([status_id], map: "status_id")
  @@index([tenant_id], map: "tenant_id")
  @@index([agency_id], map: "property_ibfk_5")
  @@index([property_type], map: "property_ibfk_6")
  @@map("properties")
}

model Role {
  role_id       Int        @id @default(autoincrement())
  name          String     @db.VarChar(25)
  created_at    DateTime   @default(now()) @db.DateTime(0)
  updated_at    DateTime?  @db.DateTime(0)
  deleted_at    DateTime?  @db.DateTime(0)
  permission_id Int
  permission    Permission @relation(fields: [permission_id], references: [permission_id], onUpdate: Restrict, map: "role_ibfk_1")
  user          User[]

  @@index([permission_id], map: "permission_id")
  @@map("roles")
}

model Sector {
  sector_id  Int       @id @default(autoincrement())
  name       String    @db.VarChar(250)
  updated_at DateTime? @db.DateTime(0)
  deleted_at DateTime? @db.DateTime(0)
  polygon    String    @db.Text
  created_at DateTime  @default(now()) @db.DateTime(0)
  agency_id  Int
  agency     Agency    @relation(fields: [agency_id], references: [agency_id], onUpdate: Restrict, map: "sector_ibfk_1")

  @@index([agency_id], map: "agency_id")
  @@map("sectors")
}

model Status {
  status_id  Int        @id @default(autoincrement())
  name       String     @db.VarChar(50)
  created_at DateTime   @default(now()) @db.DateTime(0)
  updated_at DateTime?  @db.DateTime(0)
  deleted_at DateTime?  @db.DateTime(0)
  property   Property[]

  @@map("statuses")
}

model Tag {
  tag_id     Int       @id @default(autoincrement())
  name       String    @db.VarChar(250)
  created_at DateTime  @default(now()) @db.DateTime(0)
  updated_at DateTime? @db.DateTime(0)
  deleted_at DateTime? @db.DateTime(0)
  article    Article[]

  @@map("tags")
}

model User {
  user_id                                    Int           @id @default(autoincrement())
  mail                                       String        @unique @db.VarChar(250)
  password                                   String        @db.VarChar(250)
  phone                                      String?       @db.VarChar(13)
  name                                       String?       @db.VarChar(250)
  firstname                                  String?       @db.VarChar(250)
  newsletter                                 Boolean
  token                                      String?       @unique @db.VarChar(250)
  created_at                                 DateTime      @default(now()) @db.DateTime(0)
  validated_at                               DateTime?     @db.DateTime(0)
  updated_at                                 DateTime?     @db.DateTime(0)
  deleted_at                                 DateTime?     @db.DateTime(0)
  address_id                                 Int?
  country_id                                 Int
  role_id                                    Int
  agency_id                                  Int?
  appointments_appointments_user_id_1Tousers Appointment[] @relation("appointments_user_id_1Tousers")
  appointments_appointments_user_id_2Tousers Appointment[] @relation("appointments_user_id_2Tousers")
  article                                    Article[]
  bookmark                                   Bookmark[]
  message_message_user_id_1Touser            Message[]     @relation("message_user_id_1Touser")
  message_message_user_id_2Touser            Message[]     @relation("message_user_id_2Touser")
  property_property_owner_idTouser           Property[]    @relation("property_owner_idTouser")
  property_property_tenant_idTouser          Property[]    @relation("property_tenant_idTouser")
  address                                    Address?      @relation(fields: [address_id], references: [address_id], onUpdate: Restrict, map: "user_ibfk_1")
  country                                    Country       @relation(fields: [country_id], references: [country_id], onUpdate: Restrict, map: "user_ibfk_2")
  role                                       Role          @relation(fields: [role_id], references: [role_id], onUpdate: Restrict, map: "user_ibfk_3")
  agency                                     Agency?       @relation(fields: [agency_id], references: [agency_id], onUpdate: Restrict, map: "user_ibfk_4")

  @@index([address_id], map: "address_id")
  @@index([agency_id], map: "agency_id")
  @@index([country_id], map: "country_id")
  @@index([role_id], map: "role_id")
  @@map("users")
}

model Property_type {
  property_type_id Int        @id @default(autoincrement())
  label            String     @db.VarChar(50)
  created_at       DateTime   @default(now()) @db.DateTime(0)
  properties       Property[]

      @@map("property_types")
}

model Appointment_tag {
  appointment_tag_id Int           @id @default(autoincrement())
  label              String        @db.VarChar(50)
  created_at         DateTime      @default(now()) @db.DateTime(0)
  appointments       Appointment[]

    @@map("appointment_tags")
}
